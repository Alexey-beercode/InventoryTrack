import { Component, OnInit } from '@angular/core';
import {FormsModule, NgForm} from '@angular/forms';
import { InventoryItemService } from '../../../services/inventory-item.service';
import { SupplierService } from '../../../services/supplier.service';
import { CreateInventoryItemDto } from '../../../models/dto/inventory-item/create-inventory-item-dto';
import { SupplierResponseDto } from '../../../models/dto/supplier/supplier-response-dto';
import { HeaderComponent } from '../../shared/header/header.component';
import { FooterComponent } from '../../shared/footer/footer.component';
import { CommonModule } from '@angular/common';
import { BackButtonComponent } from "../../shared/back-button/back-button.component";
import { ErrorMessageComponent } from '../../shared/error/error.component';

@Component({
  selector: 'app-create-inventory-item',
  templateUrl: './create-inventory-item.component.html',
  styleUrls: ['./create-inventory-item.component.css'],
  standalone: true,
  imports: [
    HeaderComponent,
    FooterComponent,
    CommonModule,
    BackButtonComponent,
    ErrorMessageComponent,
    FormsModule,
  ],
})
export class CreateInventoryItemComponent implements OnInit {
  newInventoryItem: CreateInventoryItemDto = {
    name: '',
    uniqueCode: '',
    quantity: 1,
    estimatedValue: 0,
    expirationDate: '',  // –î–∞—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ `yyyy-MM-dd`
    supplierId: '',
    warehouseId: '',
    deliveryDate: '',
    documentFile: null as any,
  };

  suppliers: SupplierResponseDto[] = [];
  warehouseId: string = '';
  errorMessage: string | null = null;

  constructor(
    private inventoryItemService: InventoryItemService,
    private supplierService: SupplierService
  ) {}

  ngOnInit(): void {
    this.loadSuppliers();
    this.initDefaultDates();
  }

  /** üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ `yyyy-MM-dd` —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è `ngModel` */
  private initDefaultDates(): void {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    this.newInventoryItem.expirationDate = this.formatDateForInput(tomorrow);
    this.newInventoryItem.deliveryDate = this.formatDateForInput(today);
  }

  /** üìå –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–∞ –∏–∑ —Ö–µ–¥–µ—Ä–∞ */
  onUserReceived(warehouseId: string): void {
    if (warehouseId) {
      this.warehouseId = warehouseId;
      this.newInventoryItem.warehouseId = warehouseId;
    } else {
      this.errorMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.";
    }
  }

  /** üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ */
  loadSuppliers(): void {
    this.supplierService.getAllSuppliers().subscribe({
      next: (data) => (this.suppliers = data),
      error: () => (this.errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.'),
    });
  }

  /** üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */
  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.newInventoryItem.documentFile = input.files[0];
    } else {
      this.errorMessage = '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!';
    }
  }

  /** üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `Date` ‚Üí `yyyy-MM-dd` (–¥–ª—è `<input type="date">`) */
  private formatDateForInput(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  /** üìå –°–æ–∑–¥–∞—ë—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å */
  createInventoryItem(form: NgForm): void {
    console.log('üî• –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –Ω–∞–∂–∞—Ç–∞');

    if (form.invalid) {
      console.warn('‚ö†Ô∏è –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      this.errorMessage = '‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!';
      return;
    }

    this.errorMessage = null;

    // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ `yyyy-MM-dd` –≤ `Date`
    const expirationDate = new Date(this.newInventoryItem.expirationDate);
    const deliveryDate = new Date(this.newInventoryItem.deliveryDate);

    console.log('üìÜ –î–∞—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:');
    console.log('   üìå expirationDate:', expirationDate.toISOString());
    console.log('   üìå deliveryDate:', deliveryDate.toISOString());

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', {
      name: this.newInventoryItem.name,
      uniqueCode: this.newInventoryItem.uniqueCode,
      quantity: this.newInventoryItem.quantity,
      estimatedValue: this.newInventoryItem.estimatedValue,
      expirationDate: expirationDate,
      deliveryDate: deliveryDate,
      supplierId: this.newInventoryItem.supplierId,
      warehouseId: this.newInventoryItem.warehouseId,
      documentFile: this.newInventoryItem.documentFile,
    });

    const formData = new FormData();
    formData.append('name', this.newInventoryItem.name.trim());
    formData.append('uniqueCode', this.newInventoryItem.uniqueCode.trim());
    formData.append('quantity', this.newInventoryItem.quantity.toString());
    formData.append('estimatedValue', this.newInventoryItem.estimatedValue.toString());
    formData.append('expirationDate', expirationDate.toISOString());
    formData.append('deliveryDate', deliveryDate.toISOString());
    formData.append('supplierId', this.newInventoryItem.supplierId);
    formData.append('warehouseId', this.newInventoryItem.warehouseId);
    formData.append('documentFile', this.newInventoryItem.documentFile);

    this.inventoryItemService.createInventoryItem(formData).subscribe({
      next: () => {
        console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        alert('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        form.resetForm();
        this.initDefaultDates(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
        this.errorMessage = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.';
      },
    });
  }

  cancel(): void {
    window.history.back();
  }
}
