import { Component, OnInit } from '@angular/core';
import { MovementRequestResponseDto } from '../../../models/dto/movement-request/movement-request-response-dto';
import { MovementRequestService } from '../../../services/movement-request.service';
import { InventoryItemService } from '../../../services/inventory-item.service';
import { WarehouseService } from '../../../services/warehouse.service';
import { UserResponseDTO } from '../../../models/dto/user/user-response-dto';
import { TokenService } from '../../../services/token.service';
import { HeaderComponent } from "../../shared/header/header.component";
import { LoadingSpinnerComponent } from "../../shared/loading-spinner/loading-spinner.component";
import { FooterComponent } from "../../shared/footer/footer.component";
import { ErrorMessageComponent } from "../../shared/error/error.component";
import { NgForOf, NgIf } from "@angular/common";
import { MovementRequestStatus } from '../../../models/dto/movement-request/enums/movement-request-status.enum';
import { ChangeStatusDto } from '../../../models/dto/movement-request/change-status-dto';

@Component({
  selector: 'app-movement-list',
  templateUrl: './movement-list.component.html',
  styleUrls: ['./movement-list.component.css'],
  standalone: true,
  imports: [
    HeaderComponent,
    LoadingSpinnerComponent,
    FooterComponent,
    ErrorMessageComponent,
    NgIf,
    NgForOf
  ]
})
export class MovementListComponent implements OnInit {
  movements: MovementRequestResponseDto[] = [];
  items: Record<string, string> = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ itemId -> itemName
  warehouses: Record<string, string> = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ warehouseId -> warehouseName
  isLoading = false;
  errorMessage: string | null = null;
  user: UserResponseDTO | null = null;
  userRoles: string[] = [];

  constructor(
    private movementService: MovementRequestService,
    private itemService: InventoryItemService,
    private warehouseService: WarehouseService,
    private tokenService: TokenService
  ) {}

  ngOnInit(): void {}

  onUserReceived(user: UserResponseDTO | null): void {
    if (!user) {
      this.errorMessage = "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.";
      return;
    }

    this.user = user;
    this.userRoles = this.tokenService.getUserRoles();
    this.loadMovements();
  }

  /** üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */
  loadMovements(): void {
    this.isLoading = true;
    this.errorMessage = null;

    this.movementService.getByWarehouse(this.user?.warehouseId!).subscribe({
      next: (data) => {
        this.movements = data;
        this.loadItemNames();
        this.loadWarehouseNames();
        this.isLoading = false;
      },
      error: () => {
        this.errorMessage = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π.';
        this.isLoading = false;
      }
    });
  }

  /** üìå –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ */
  loadItemNames(): void {
    const itemIds = new Set(this.movements.map((m) => m.itemId));
    itemIds.forEach((itemId) => {
      this.itemService.getInventoryItemById(itemId).subscribe({
        next: (item) => this.items[itemId] = item.name,
        error: () => this.errorMessage = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞.`
      });
    });
  }

  /** üìå –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ */
  loadWarehouseNames(): void {
    const warehouseIds = new Set(
      this.movements.flatMap(m => [m.sourceWarehouseId, m.destinationWarehouseId])
    );

    warehouseIds.forEach((warehouseId) => {
      if (!this.warehouses[warehouseId]) {
        this.warehouseService.getWarehouseById(warehouseId).subscribe({
          next: (warehouse) => this.warehouses[warehouseId] = warehouse.name,
          error: () => this.errorMessage = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–∞.`
        });
      }
    });
  }

  /** üìå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */
  getItemName(itemId: string): string {
    return this.items[itemId] || '–ó–∞–≥—Ä—É–∑–∫–∞...';
  }

  /** üìå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ */
  getWarehouseName(warehouseId: string): string {
    return this.warehouses[warehouseId] || '–ó–∞–≥—Ä—É–∑–∫–∞...';
  }

  /** ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ `Processing`) */
  approveMovement(movementId: string): void {
    if (!this.user) {
      this.errorMessage = '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!';
      return;
    }

    const dto: ChangeStatusDto = {
      userId: this.user.id,
      requestId: movementId
    };

    this.movementService.approve(dto).subscribe({
      next: () => {
        alert("‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!");
        this.loadMovements();
      },
      error: () => alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!")
    });
  }

  /** ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ `Processing`) */
  rejectMovement(movementId: string): void {
    if (!this.user) {
      this.errorMessage = '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!';
      return;
    }

    const dto: ChangeStatusDto = {
      userId: this.user.id,
      requestId: movementId
    };

    this.movementService.reject(dto).subscribe({
      next: () => {
        alert("‚ùå –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!");
        this.loadMovements();
      },
      error: () => alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!")
    });
  }

  protected readonly MovementRequestStatus = MovementRequestStatus;
}
